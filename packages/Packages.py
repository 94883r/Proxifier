#!/usr/bin/env python
try:
	from configobj import ConfigObj, ConfigObjError
except ImportError, e:
	print 'Unable to set for wget, please install python-configobj'
	sys.exit()
import os
from gi.repository import Gio, GLib
from storm import ConfigParser
from urlparse import urlsplit

class Bash( object ):
	bash_proxy_file = '/etc/profile.d/Proxifier.sh'

	def Set( self ):
		print( '\r\n\r\n[System]' )
		if self.verbose:
			print( '%s Checking if \'bash\' is installed' % self.date() )
		if self.package_installed( 'bash' ):
			if self.verbose:
					print( '%s bash is installed, Opening/creating %s for writing' % ( self.date(), self.bash_proxy_file ) )
			with open( self.bash_proxy_file, 'w' ) as proxy_file:
				content = '#Proxy file generated by Proxifier\r\n\r\n'
				content += 'export http_proxy=' + self.http 
				content += 'export https_proxy=' + self.http 
				content += 'export ftp_proxy=' + self.http 
				content += 'export ftps_proxy=' + self.http 
				content += 'export socks_proxy=' + self.http
				proxy_file.write( content.strip() )
				if self.verbose:
					print( '%s Proxy configuration written to %s' % ( self.date(), self.bash_proxy_file ) )
		else:
			if self.verbose:
				print( '%s Bash is not installed, skipping' % self.date() )

	def Unset( self ):
		print( '\r\n\r\n[System]' )
		if self.verbose:
			print( '%s Checking if bash is installed' % self.date() )
		if self.package_installed( 'bash' ):
			if self.verbose:
				print( '%s Removing %s configuration file if exists' % ( self.date(), self.bash_proxy_file ) )
			if os.path.isfile( self.bash_proxy_file ):
				os.remove( self.bash_proxy_file )


class Wget( object ):
	wgetrc = '/etc/wgetrc'

	def Set( self ):
		if self.package_installed( 'wget' ):
			print( '\r\n\r\n[WGET]' )
			if self.verbose:
				print '%s Wget is installed, opening %s for writing ' % ( self.date(), self.wgetrc )
			try:
				self.backup_config( self.wgetrc )
				config = ConfigObj( self.wgetrc )
				config[ 'http_proxy' ] = self.http 
				config[ 'https_proxy' ] = self.http
				config[ 'ftp_proxy' ] = self.http
				config[ 'use_proxy' ] = 'on'
				config.write( open( self.wgetrc, 'w' ) )
				if self.verbose:
					print( '%s Proxy configuration written successfully to %s ' % ( self.date(), self.wgetrc ) )
			except ( IOError, ConfigObjError ), e:
				print( 'Unable to set wget proxy: Error reading wget config in \'%s\' - %s' % ( self.wgetrc, e ) )
				os.exit( 1 )
		else:
			print( '%s Wget not installed, skipping' % self.date() )
		super( Wget, self ).Set()

	def Unset( self ):
		if self.package_installed( 'wget' ):
			print( '\r\n\r\n[WGET]' )
			if self.verbose:
				print( '%s Wget is installed, opening %s for writing ' % ( self.date(), self.wgetrc ) )
			try:
				config = ConfigObj( self.wgetrc )
				if config.has_key( 'http_proxy' ): 
					del config[ 'http_proxy' ]
				if config.has_key( 'https_proxy' ):
					del config[ 'https_proxy' ]
				if config.has_key( 'ftp_proxy' ):
					del config[ 'ftp_proxy' ]

				config[ 'use_proxy' ] = 'off'
				config.write( open( self.wgetrc, 'w' ) )
				if self.verbose:
					print( '%s Proxy configuration removed successfully from %s ' % ( self.date(), self.wgetrc ) )
			except ( IOError, ConfigObjError ), e:
				print( 'Unable to unset wget proxy: Error reading wget config in \'%s\' - %s' % ( self.wgetrc, e ) )
				os.exit( 1 )
		else:
			print( '%s Wget not installed, skipping' % self.date() )
		super( Wget, self ).Unset()



class KDE( object ):
	"""This module is for setting proxy for KDE Desktops and Apps"""
	def Set( self ):
		desktops = self.desktops()
		if desktops and 'plasma' in desktops:
			print( '\n\n[KDE]' )
			if self.verbose:
				print( '{0} Found Plasma DE installed'.format( self.date() ) )
			config = os.path.join( os.path.expanduser( '~' + str( self.get_sudoer() ) ), '.kde/share/config', 'kioslaverc' )
			if os.path.isfile( config ):
				config_file = ConfigObj( config )
				section = config_file.get( 'Proxy Settings' )
				section[ 'ftpProxy' ] = 'http://' + self.http
				section[ 'httpProxy' ] = 'http://' + self.http 
				section[ 'httpsProxy' ] = 'http://' + self.http
				section[ 'socksProxy' ] = 'http://' + self.http
				section[ 'ProxyType' ] = 1
				config_file.write( open( config, 'w' ) )
				if self.verbose:
					print( '{0} Proxy successfully set'.format( self.date() ) )
			else:
				if self.verbose:
					print( '{0} Proxy configuration file doesn\'t exist, skipping...'.format( self.date() ) )
		else:
			if self.verbose:
				print( '{0} Plasma DE doesn\'t exist on this system. Skipping'.format( self.date() ) )
		super( KDE, self ).Set()

	def Unset( self ):
		desktops = self.desktops()
		if desktops and 'plasma' in desktops:
			print( '\n\n[KDE]')
			if self.verbose:
				print( '{0} Found Plasma DE installed'.format( self.date() ) )
			config = os.path.join( os.path.expanduser( '~' + str( self.get_sudoer() ) ), '.kde/share/config', 'kioslaverc' )
			if os.path.isfile( config ):
				config_file = ConfigObj( config )
				section = config_file.get( 'Proxy Settings' )
				section[ 'ProxyType' ] = 0
				config_file.write( open( config, 'w' ) )
				if self.verbose:
					print( '{0} Proxy successfully removed'.format( self.date() ) )
			else:
				if self.verbose:
					print( '{0} Proxy configuration file doesn\'t exist, skipping...'.format( self.date() ) )
		else:
			if self.verbose:
				print( '{0} Plasma DE doesn\'t exist on this system. Skipping'.format( self.date() ) )
		super( KDE, self ).Unset()



class GTK( object ):
	mode = Gio.Settings( 'org.gnome.system.proxy' )
	http_proxy = Gio.Settings( 'org.gnome.system.proxy.http' )
	https_proxy = Gio.Settings( 'org.gnome.system.proxy.https' )

	def Set( self ):
		print( '\r\n\r\n[GTK]' )
		if self.verbose:
			print( '{0} Setting gsettings proxy mode to manual'.format( self.date() ) )
		self.mode.set_string( 'mode', 'manual' )

		if self.verbose:
			print( '{0} Setting http proxy for gsettings on {1}:{2}'.format( self.date(), self.host, self.port ) )
		self.http_proxy.set_value( 'host', GLib.Variant( 's', self.http ) )
		self.http_proxy.set_value( 'port',  GLib.Variant( 'i', int( self.port ) ) )

		if self.verbose:
			print( '{0} Setting https proxy for gsettings on {1}:{2}'.format( self.date(), self.host, self.port ) )
		self.https_proxy.set_value( 'host', GLib.Variant( 's', self.http ) )
		self.https_proxy.set_value( 'port', GLib.Variant( 'i', int( self.port ) ) )

		super( GTK, self ).Set()

	def Unset( self ):
		print( '\r\n\r\n[GTK]' )
		if self.verbose:
			print( '{0} Setting gsettings proxy to \'none\''.format( self.date() ) )
		self.mode.set_string( 'mode', 'none' )
		super( GTK, self ).Unset()



class SSH( object ):
	ssh_config = '/etc/ssh/ssh_config'

	def Set( self ):
		if self.package_installed( 'openssh-client' ):
			print( '\r\n\r\n[SSH]' )
			if not self.package_installed( 'corkscrew' ):
				print( '%s NOTICE! `corkscrew` is not installed, so skipping SSH proxy settings' % self.date() )
			else:
				if self.host:
					if self.verbose:
						print( '%s Opening %s for writing' % ( self.date(), self.ssh_config ) )
					
					verbose = self.verbose
					self.verbose = False
					self.unset_ssh( False )
					self.verbose = verbose
					
					self.backup_config( self.ssh_config )
					config = ConfigParser( self.ssh_config )
					loaded = config.load()
					config.update_host( '*', { 'ProxyCommand' : 'corkscrew ' + str( self.host ) + ' ' + str( self.port ) + ' %h %p' } )
					config.write_to_ssh_config()
					print( '%s Proxy configuration written to %s' % ( self.date(), self.ssh_config ) )
		else:
			print( '%s SSH not installed, skipping' )
		super( SSH, self ).Set()

	def unset_ssh( self, show = True ):
		if self.package_installed( 'openssh-client' ):
			if show:
				print( '\r\n\r\n[SSH]' )
			if self.verbose:
				print( '%s Opening %s for reading' % ( self.date(), self.ssh_config ) )
			config = ConfigParser( self.ssh_config )
			loaded = config.load()
			for index, host in enumerate( config.config_data ):
				if host[ 'host' ] == '*':
					if 'proxycommand' in host[ 'options' ]:
						del config.config_data[ index ][ 'options' ][ 'proxycommand' ]
					if 'ProxyCommand' in host[ 'options' ]:
						del config.config_data[ index ][ 'options' ][ 'ProxyCommand' ]
			config.write_to_ssh_config()
			if self.verbose:
				print( '%s Proxy successfully removed from %s' % ( self.date(), self.ssh_config ) )

	def Unset( self ):
		self.unset_ssh()
		super( SSH, self ).Unset()


class APT( object ):
	apt_conf = '/etc/apt/apt.conf.d/999Proxifier' 

	def Set( self ):
		print( '\r\n\r\n[APT]' )
		if self.verbose:
			print( '%s Opening/Creating %s config file' % ( self.date(), self.apt_conf ) )
		with open( self.apt_conf, 'w' ) as file:
			content = """Acquire::http::Proxy "%s";""" % ( self.http )
			file.write( content )
		if self.verbose:
			print( '%s Proxy configuration successfully written to %s' % ( self.date(), self.apt_conf ) )
		super( APT, self ).Set()

	def Unset( self ):
		print( '\r\n\r\n[APT]' )
		if self.verbose:
			print( '%s Removing %s file if exists' % ( self.date(), self.apt_conf ) )
		if os.path.isfile( self.apt_conf ):
			os.remove( self.apt_conf )
		super( APT, self ).Unset()